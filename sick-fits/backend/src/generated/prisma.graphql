# source: https://eu1.prisma.sh/eliazer-braun-01d3be/headless-db/dev
# timestamp: Tue Nov 27 2018 23:31:10 GMT-0500 (Eastern Standard Time)

type AggregateProducts {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProducts(data: ProductsCreateInput!): Products!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Products implements Node {
  id: ID!
  title: String!
  sku: String!
  imgSrc: String!
  price: Int!
  stock: Boolean!
}

"""A connection to a list of items."""
type ProductsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  title: String!
  sku: String!
  imgSrc: String!
  price: Int!
  stock: Boolean!
}

"""An edge in a connection."""
type ProductsEdge {
  """The item at the end of the edge."""
  node: Products!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  sku_ASC
  sku_DESC
  imgSrc_ASC
  imgSrc_DESC
  price_ASC
  price_DESC
  stock_ASC
  stock_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductsPreviousValues {
  id: ID!
  title: String!
  sku: String!
  imgSrc: String!
  price: Int!
  stock: Boolean!
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
}

input ProductsUpdateInput {
  title: String
  sku: String
  imgSrc: String
  price: Int
  stock: Boolean
}

input ProductsUpdateManyMutationInput {
  title: String
  sku: String
  imgSrc: String
  price: Int
  stock: Boolean
}

input ProductsWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  imgSrc: String

  """All values that are not equal to given value."""
  imgSrc_not: String

  """All values that are contained in given list."""
  imgSrc_in: [String!]

  """All values that are not contained in given list."""
  imgSrc_not_in: [String!]

  """All values less than the given value."""
  imgSrc_lt: String

  """All values less than or equal the given value."""
  imgSrc_lte: String

  """All values greater than the given value."""
  imgSrc_gt: String

  """All values greater than or equal the given value."""
  imgSrc_gte: String

  """All values containing the given string."""
  imgSrc_contains: String

  """All values not containing the given string."""
  imgSrc_not_contains: String

  """All values starting with the given string."""
  imgSrc_starts_with: String

  """All values not starting with the given string."""
  imgSrc_not_starts_with: String

  """All values ending with the given string."""
  imgSrc_ends_with: String

  """All values not ending with the given string."""
  imgSrc_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  stock: Boolean

  """All values that are not equal to given value."""
  stock_not: Boolean
}

input ProductsWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  user(where: UserWhereUniqueInput!): User
  products(where: ProductsWhereUniqueInput!): Products
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
